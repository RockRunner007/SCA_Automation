pipeline {
    agent { label "orca_build-small" }
    parameters {
        string(name: 'XRAY', defaultValue: '{URL}', description: 'Define the Xray instance you want to use for scanning', trim: true)
        string(name: 'NOTIFY', defaultValue: '{Email}', description: 'Define who you want want to send the report to', trim: true)
        string(name: 'WATCH', defaultValue: '{Watch}', description: 'Define which watch you want to pull reports from', trim: true)
        string(name: 'SEVERITY', defaultValue: 'Major', description: 'Defines the min severity level for pulling security risk', trim: true)
    }
    stages {
        stage("Generate Report") {
            steps {
                cleanWs()
                checkout scm
                sh '/usr/local/bin/pip3 install pipenv'
                sh "/usr/local/bin/pipenv --python /usr/local/bin/python3 install"
                withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory-docker', passwordVariable: 'xray_pwd', usernameVariable: 'xray_user')]) {
                    sh "/usr/local/bin/pipenv run python3 xray.py"
                }
            }
        }
    }
    post {
        success {
            script {
                def stats = readJSON file: 'osa.json', text: ''
                def security = readJSON file: 'Security.json', text: ''
                def license = readJSON file: 'License.json', text: ''
                def securitystring = '<ul>'
                def licensestring = '<ul>'

                security.each { item ->
                    securitystring += "<li><b>Package:</b> ${item.package} - <b>Version:</b> ${item.version} - <b>Fixed Version:</b> ${item.fixed_versions} - <b>Package Details:</b> ${item.packagelocation} <ul><li><b>Description:</b> ${item.description}</li></ul></li>"
                }
                securitystring += '</ul>'
                def securitydescription = "If possible, please upgrade these packages to latest. If not possible, create a jira ticket to upgrade the package in the future and let the DSO team know about the risk."

                license.each { item ->
                    licensestring += "<li><b>Package:</b> ${item.package} - <b>Version:</b> ${item.version} - <b>License:</b> ${item.summary} <ul><li><b>License Details:</b> ${item.licenseurl}</li></ul></li>"
                }
                licensestring += '</ul>'
                def licensedescription = "If possible, please remove these packages. If not possible, work with the DSO team to review the risk."

                emailext attachmentsPattern: 'Security.json, License.json', 
                body: "Please review the most recent Open Source scan results found within the watch ${WATCH}.</br></br><b>Security Findings:</b></br><i>${securitydescription}</i></br>${securitystring}</br></br><b>License Findings:</b></br><i>${licensedescription}</i></br>${licensestring}</br></br>More details can be found at: {Web Reference}", 
                replyTo: '{Email}', 
                subject: "jFrog Xray Scanned your project and found open source risk and license issues. Total Violations: ${stats.total_violations}", 
                to: "${NOTIFY}"
            }
        }
        failure {
            mail to: '{Email}', subject: "Build Failure: ${JOB_BASE_NAME}", body: "Failed to generate checkmarx report.  ${BUILD_URL}"
        }
    }
}